# 优化的前端Dockerfile - 专门处理原生依赖
# 多阶段构建 - 构建阶段
FROM node:20-alpine AS builder

WORKDIR /app

# 设置环境变量
ENV NODE_ENV=development
ENV PYTHON=/usr/bin/python3

# 安装系统依赖 - 分层安装以优化缓存
RUN apk add --no-cache \
    # Python和基础构建工具
    python3 \
    py3-pip \
    make \
    g++ \
    gcc \
    # Canvas依赖
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    librsvg-dev \
    pixman-dev \
    # Sharp依赖
    vips-dev \
    # 其他可能需要的依赖
    pkgconfig \
    libc6-compat

# 创建Python软链接
RUN ln -sf python3 /usr/bin/python

# 复制package文件
COPY package*.json ./

# 设置npm配置以处理原生模块
RUN npm config set python /usr/bin/python3
RUN npm config set node-gyp-rebuild true

# 安装依赖 - 使用更宽松的策略
RUN npm install --legacy-peer-deps --verbose

# 复制源代码
COPY . .

# 构建Next.js应用
RUN npm run build

# 生产阶段 - 使用更小的运行时镜像
FROM node:20-alpine AS runner

WORKDIR /app

# 安装运行时依赖
RUN apk add --no-cache \
    cairo \
    jpeg \
    pango \
    giflib \
    librsvg \
    pixman \
    vips \
    libc6-compat

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 创建用户
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# 复制public文件夹
COPY --from=builder /app/public ./public

# 复制构建产物
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# 切换到非root用户
USER nextjs

# 暴露端口
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 启动应用
CMD ["node", "server.js"]
